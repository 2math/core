apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.2math'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
//    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        publishNonDefault true

    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles(fileTree(dir: 'proguard', include: ['*.pro']).asList().toArray())
            consumerProguardFiles 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            consumerProguardFiles(fileTree(dir: 'proguard', include: ['*.pro']).asList().toArray())
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //todo migration to androidX
//  android studio has a problem if design lib is with compileOnly or reference
    api 'com.google.android.material:material:1.0.0'
    //use complyOnly and ask the users to include in them gradle
    compileOnly 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    compileOnly "com.google.code.gson:gson:${rootProject.ext.gson}"

    compileOnly 'androidx.appcompat:appcompat:1.0.0'
    compileOnly 'androidx.legacy:legacy-support-v4:1.0.0'
    compileOnly 'androidx.exifinterface:exifinterface:1.0.0'

    compileOnly 'com.squareup.picasso:picasso:2.5.2'
    compileOnly 'com.balysv:material-ripple:1.0.2'
    compileOnly ('co.infinum:materialdatetimepicker-support:3.5.1') {
        exclude group: 'com.android.support'
    }
//    api 'com.wdullaer:materialdatetimepicker:3.6.0'

    //tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.arch.core:core-testing:2.0.0'
    testImplementation 'org.mockito:mockito-core:2.11.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}