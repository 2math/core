apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.criapp_studio.coreapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode 10
        versionName "1.13"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            try {
                storeFile file(KEYSTORE)
                storePassword KEYSTORE_PASSWORD
                keyAlias KEY_USER
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
        debug {
            try {
                storeFile file(KEYSTORE)
                storePassword KEYSTORE_PASSWORD
                keyAlias KEY_USER
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles(fileTree(dir: 'proguard', include: ['*.pro']).asList().toArray())
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

        }
        debug {
            minifyEnabled false
            proguardFiles(fileTree(dir: 'proguard', include: ['*.pro']).asList().toArray())
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
//            ext.enableCrashlytics = false
        }
    }

    def STRING = "String"
    def SERVER_URL = "SERVER_URL"

    flavorDimensions "server"
    productFlavors {
        dev {
            dimension "server"
            buildConfigField STRING, SERVER_URL, '"https://gobeauty-mobile-dev.herokuapp.com/"'
        }
    }
}

dependencies {
    implementation project(':core_library')
//    implementation 'com.github.2math:core:1.0.0'

//    required by com.github.2math:core lib
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "com.google.code.gson:gson:${rootProject.ext.gson}"

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.1.0'

    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.balysv:material-ripple:1.0.2'
    implementation ('co.infinum:materialdatetimepicker-support:3.5.1') {
        exclude group: 'com.android.support'
    }
//    required by com.github.2math:core lib end

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}

//configurations.all {
//    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//        def requested = details.requested
//        if (requested.group == 'com.android.support') {
//            if (!requested.name.startsWith("multidex")) {
//                details.useVersion "${rootProject.ext.supportLibraryVersion}"
//            }
//        }
//    }
//}
